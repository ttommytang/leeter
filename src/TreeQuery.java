import java.util.HashSet;
import java.util.HashMap;
import java.util.Queue;
import java.util.LinkedList;

public class TreeQuery {
    public static void main(String[] args) {
        int[] a = {11,9,18,42,42,31,33,29,23,37,17,11,23,44,8,30,22,47,31,11,21,24,48,15,37,24,38,7,49,8,20,49,15,34,16,17,41,44,41,21,5,25,23,18,45,22,39,15,47,27,26,1,22,47,17,22,38,25,7,7,25,37,41,47,2,5,30,12,32,2,19,47,37,46,10,10,14,20,21,16,13,22,12,21,46,41,46,18,18,2,14,5,27,32,38,43,2,2,9,34,14,29,30,42,3,47,38,32,2,12,42,7,50,2,21,27,46,42,42,41,40,46,46,31,18,10,24,37,36,49,25,41,43,31,21,9,38,25,8,33,14,31,30,38,3,10,24,18,36,7,42,18,40,48,40,17,32,39,5,46,49,2,49,7,22,8,9,10,27,34,7,10,11,2,38,41,48,40,3,2,26,32,29,40,4,5,6,5,31,45,9,42,44,44,21,13,25,18,43,30,9,14,31,43,45,28,12,6,4,44,30,50,18,50,50,11,43,21,14,7,22,25,21,42,36,7,44,6,10,41,24,30,10,19,40,11,50,9,11,50,37,22,27,12,50,33,18,50,19,41,26,19,28,45,45,47,46,27,32,6,30,16,28,29,13,10,15,47,2,1,33,15,17,38,26,36,1,28,4,19,7,8,29,35,39,15,33,41,13,27,38,41,44,27,41,30,38,32,12,44,6,42,7,47,3,22,17,47,9,14,27,33,6,27,34,24,17,44,43,41,50,13,24,15,45,35,3,6,45,27,33,13,5,7,38,16,39,20,24,21,23,31,41,39,21,13,14,17,31,36,28,13,10,48,33,5,28,16,41,37,5,18,29,9,5,31,23,7,44,48,45,19,46,48,14,5,50,38,46,1,25,15,34,3,16,24,11,41,1,28,27,50,35,45,30,6,30,41,48,40,3,18,42,3,22,37,31,2,16,36,44,14,18,39,41,38,4,36,19,20,18,21,30,34,7,11,37,31,18,40,42,23,46,48,37,20,35,44,42,49,2,34,8,4,39,50,11,44,26,24,2,17,41,36,5,36,12,21,47,4,18,45,41,3,13,50,36,1,22,48,20,25,32,49,3,35,50,3,34,3,32,2,3,5,43,50,12,47,36,27,25,19,6,30,46,29,35,36,34,46,26,2,18,47,39,38,49,44,30,23,49,13,9,5,44,8,8,12,44,37,38,31,47,4,6,30,28,2,42,6,37,16,12,4,7,11,20,38,31,42,15,46,5,12,3,7,19,27,37,23,37,8,15,29,14,48,32,13,21,4,38,26,50,45,4,43,11,17,25,36,39,32,27,32,5,47,7,14,5,50,13,42,46,6,4,21,46,22,4,11,17,9,21,9,8,38,8,22,37,42,11,4,43,22,12,36,21,10,30,17,12,16,17,21,29,19,26,29,33,36,39,42,2,50,27,21,45,47,32,26,2,16,26,6,13,21,49,19,10,47,15,6,7,4,26,10,40,26,42,20,44,19,2,16,50,48,21,12,28,17,19,12,2,30,11,48,1,1,14,14,31,29,1,31,31,7,31,45,1,28,26,32,35,17,47,38,42,18,14,1,23,15,14,12,3,43,20,18,7,23,13,10,28,23,15,47,34,17,34,36,18,23,33,10,18,18,5,20,7,7,33,48,27,41,6,16,43,14,45,37,29,22,7,9,2,11,42,4,36,41,11,37,1,10,40,16,21,34,14,40,19,37,26,14,45,32,47,19,39,9,11,15,44,47,48,12,9,33,1,3,17,28,17,41,39,31,2,12,2,48,2,36,20,23,2,34,32,27,10,8,1,20,27,19,41,32,19,37,30,37,14,31,2,42,31,49,46,14,42,12,48,22,22,23,35,29,33,36,34,17,16,44,45,8,40,10,30,13,30,13,41,36,44,31,42,18,46,12,5,6,48,46,35,7,28,13,23,8,38,17,30,21,37,24,4,32,35,48,21,40,2,23,33,47,16,48,37,47,34,39,22,50,23,49,30,15,45,11,45,10,47,28,19,27,17,33,46,17,23,2,17,22,43,18,12,26,28,8,45,36,41,6,25,31,29,16,11,40,12,33,9,1,49,26,17,39,30,20,2,38,9,46,27,17,47,5,28,31,48,7,45,22,47,23,9,49,42,32,43,45,14,27,12,47,23,31,1,6,9,1,40,31,28,27,1,34,15,5,22,11,35,38,39,50,16,33,14,14,21,23,4,21,28,19,48,44,43,21,13,3,9,35,50,16,20,28,49,26,4,25,41,36,9,33,39,3,43,11,31};
        int[] b = {723,940,947,930,135,192,96,178,871,736,449,70,468,263,579,353,390,113,205,423,964,85,442,97,697,836,785,389,557,898,729,602,646,993,551,776,630,430,431,445,637,465,79,899,379,880,199,18,414,502,793,654,185,688,48,872,385,332,238,965,268,747,863,489,944,639,981,107,685,167,807,450,196,962,843,340,753,852,336,803,712,882,702,413,931,507,270,285,487,218,936,542,58,953,360,92,224,14,10,665,333,538,996,202,371,374,411,106,661,134,664,272,645,677,89,289,260,443,128,161,525,966,327,983,131,904,214,151,108,392,566,490,49,666,334,51,553,220,576,945,968,910,175,918,100,71,700,418,651,267,974,519,825,61,446,811,284,186,913,859,529,6,481,398,900,520,555,653,246,212,341,783,496,985,459,533,475,52,758,679,506,466,258,616,539,775,74,275,480,474,179,951,954,612,59,796,191,698,159,696,174,929,448,772,868,452,420,234,874,197,301,927,228,526,349,425,976,221,813,256,748,817,158,771,978,540,634,671,177,110,548,99,361,652,984,585,279,12,512,492,219,744,601,470,315,876,946,458,923,873,545,565,53,756,768,788,386,826,693,206,357,704,544,949,922,778,749,207,886,27,750,127,752,734,691,952,786,46,281,176,543,291,865,123,935,73,435,404,320,655,231,757,153,860,877,83,530,795,424,364,963,105,531,94,926,561,680,504,660,409,399,499,181,879,88,875,604,56,331,460,276,663,405,396,640,980,257,29,827,486,764,792,17,354,376,738,735,870,326,556,527,335,69,625,853,91,233,473,172,901,766,155,252,241,62,259,831,317,111,695,410,488,805,800,955,124,280,305,1000,631,992,884,925,343,889,77,941,242,366,524,42,589,885,896,578,304,508,227,248,887,403,715,777,137,229,617,890,339,467,510,362,997,44,216,739,973,402,4,365,920,668,657,80,517,569,618,164,244,138,818,237,23,959,302,232,378,917,789,644,784,633,608,568,686,674,716,943,770,755,250,346,278,303,323,427,472,146,112,469,867,491,293,761,453,292,104,699,66,623,781,55,438,298,849,22,350,582,591,485,572,188,30,632,915,609,40,78,67,306,528,163,182,271,615,971,921,57,262,938,850,313,562,344,854,765,857,797,337,595,126,328,678,808,509,118,912,948,658,840,970,516,148,324,5,394,684,894,957,249,706,200,369,173,25,869,990,393,412,605,154,596,322,300,627,21,906,969,436,87,713,273,588,63,819,213,312,659,90,779,162,454,16,36,934,672,143,132,769,65,559,309,170,372,45,501,282,641,881,359,979,610,822,352,563,47,209,8,310,583,330,407,456,878,356,897,577,296,348,15,239,307,147,417,169,537,816,139,689,255,564,575,156,718,37,708,611,649,675,773,593,225,253,961,690,603,406,692,295,395,166,791,721,11,117,35,928,98,847,628,43,731,613,701,751,787,745,329,440,203,64,387,72,439,7,888,600,157,355,141,32,367,187,370,41,86,68,287,160,594,245,956,358,550,223,687,722,444,314,862,895,982,421,760,145,115,987,380,433,308,497,707,614,574,171,570,958,995,28,217,9,286,864,907,39,13,754,774,676,855,384,834,222,804,240,592,844,457,180,101,587,462,823,211,939,494,204,541,441,560,705,236,942,635,998,142,858,861,759,294,902,247,798,534,571,727,812,483,733,311,709,916,103,493,19,152,710,638,500,989,345,54,815,829,120,195,428,261,168,833,673,988,215,144,415,269,694,60,109,767,810,647,401,50,478,866,422,400,165,437,746,546,201,479,190,20,558,484,116,848,149,471,905,832,183,297,193,482,845,264,266,624,794,194,388,382,839,977,521,119,426,381,397,994,429,95,841,703,728,762,567,991,84,619,737,114,495,434,656,82,636,725,903,150,669,820,536,432,363,299,643,368,598,316,129,277,799,391,580,549,932,599,972,670,447,681,717,782,621,740,76,319,824,837,986,830,724,130,780,532,140,846,730,75,726,31,622,121,451,714,338,518,461,511,210,908,318,883,189,283,342,265,607,842,597,648,642,835,975,590,741,851,325,806,790,606,801,732,464,351,455,809,547,683,814,535,274,999,38,2,650,198,503,554,288,290,742,515,711,102,584,230,581,254,26,586,620,911,476,914,933,719,419,81,950,662,133,243,743,891,3,184,667,924,125,505,909,416,629,34,893,375,208,802,498,682,821,919,513,892,552,122,514,967,720,235,522,136,838,24,408,828,377,523,477,93,33,226,373,573,463,251,626,321,347,856,937,383,763,960};
        int[] x = {680,402,147,786,623,528,599,101,50,564,169,91,70,589,578,203,227,365,667,702,420,498,663,780,668,860,29,90,597,523,118,245,478,367,150,787,282,464,609,686,244,520,334,276,341,157,15,924,455,703,355,803,54,898,166,690,963,261,501,554,323,156,825,840,768,422,42,284,922,329,223,504,958,534,505,814,363,385,96,175,847,512,343,805,361,168,460,383,79,187,183,391,946,279,283,836,752,757,80,864,817,454,430,531,202,143,905,706,126,37,705,33,208,45,829,816,446,194,625,506,495,708,362,920,923,970,490,975,230,731,766,41,84,943,273,591,728,673,98,959,800,867,890,581,477,914,878,709,964,305,20,764,44,333,677,515,858,393,440,465,289,232,756,172,648,835,312,53,332,707,349,758,743,649,344,879,759,459,419,159,100,18,732,85,61,228,277,848,125,772,560,580,831,612,437,796,270,729,463,364,669,456,915,426,832,457,2,549,931,792,192,569,655,687,46,568,296,38,653,433,967,968,1000,119,161,482,821,342,240,107,995,744,584,530,485,950,598,862,899,952,990,297,742,977,851,704,654,411,692,466,200,699,298,30,791,850,406,741,588,602,770,462,17,95,71,762,314,737,882,299,801,651,347,927,395,985,310,428,255,739,859,522,577,110,904,532,162,35,966,271,637,121,784,307,733,844,926,643,74,629,863,947,378,497,249,953,338,558,974,691,220,567,286,145,258,480,288,949,59,721,353,10,3,481,128,819,93,354,272,666,390,751,639,856,292,537,790,984,374,670,351,247,736,219,210,470,999,87,885,124,940,432,873,541,572,416,340,613,616,941,935,403,912,871,695,838,945,186,55,451,444,810,929,928,845,75,47,140,700,870,917,869,226,951,56,789,151,376,280,585,925,438,889,483,503,13,992,876,189,423,26,965,326,380,996,76,275,243,614,259,236,711,281,802,475,760,763,678,188,213,660,372,304,798,313,881,775,206,330,180,132,295,4,122,565,417,837,73,66,773,826,375,345,514,321,49,991,509,853,167,804,833,250,635,335,698,336,190,556,381,824,685,886,813,933,81,108,25,901,989,129,993,618,293,674,755,368,443,131,300,834,174,571,645,211,650,198,608,517,552,507,19,389,866,78,893,562,471,212,628,357,177,615,214,197,449,723,976,767,184,605,607,828,754,894,891,617,545,278,777,269,68,793,566,453,117,719,254,662,820,855,315,405,410,750,36,231,493,510,971,264,106,425,99,857,229,519,594,957,939,595,384,684,318,291,590,718,469,111,934,488,398,392,116,636,518,576,671,484,841,58,339,302,139,875,441,573,127,201,861,253,727,593,239,842,658,551,527,137,815,765,740,154,377,141,104,394,830,486,827,747,382,164,458,170,779,173,661,559,308,583,521,954,603,701,640,884,473,725,809,771,31,818,158,872,525,500,491,641,260,675,877,932,360,427,248,697,919,955,467,39,900,397,972,969,412,502,185,896,431,436,199,979,434,646,195,778,843,445,327,115,987,92,998,852,961,487,647,294,442,897,34,424,257,23,408,350,906,544,627,730,474,207,224,930,761,948,476,981,404,51,7,903,983,892,526,196,112,407,540,633,88,586,575,656,452,346,105,439,874,373,11,769,557,28,114,619,233,86,726,524,783,165,337,113,880,369,570,781,533,788,713,883,97,956,634,209,14,40,785,256,722,268,348,215,911,679,631,812,600,181,735,681,301,399,133,657,238,716,176,82,665,960,461,696,371,142,492,379,409,102,234,366,135,21,910,774,83,435,621,712,535,242,204,136,193,494,916,352,745,148,160,710,978,205,306,823,799,715,909,290,672,52,776,5,370,982,265,561,508,538,225,325,103,902,144,57,865,624,694,65,942,611,546,218,717,683,48,123,973,401,582,396,664,563,179,328,120,415,217,303,994,267,839,262,944,720,807,753,130,908,266,138,511,937,997,601,938,620,32,285,895,237,550,596,320,542,450,676,216,988,235,795,547,146,652,574,322,794,152,548,592,60,72,644,252,331,67,69,888,309,134,682,263,539,413,734,587,163,24,688,921,109,77,287,418,94,43,316,811,806,178,27,8,638,22,738,472,632,749,499,387,622,714,849,907,89,782,724,536,400,447,529,606,9,421,868,543,311,604,149,221,386,479,887,659,918,274,182,12,610,388,693,16,516,962,414,689,986,448,854,748,797,359,324,489,358,6,913,808,317,846,63,429,468,630,496,64,642,191,222,822,746,980,579,936,155,626,356,246,319,153,241,555,171,553,513,62,251};
        int[] y = {751,434,459,50,36,911,118,604,263,834,61,42,37,889,462,806,697,823,901,723,181,400,38,291,319,782,282,520,687,222,156,933,896,683,961,637,586,362,943,410,872,608,680,438,568,851,930,217,52,926,794,199,590,818,351,932,900,42,439,511,413,726,252,569,551,220,968,601,681,484,755,314,554,797,195,676,370,757,561,265,969,483,728,972,492,512,369,781,208,792,805,286,806,489,88,405,155,52,568,497,579,213,972,938,413,599,272,252,744,552,336,538,977,908,538,937,416,82,780,833,123,606,961,814,907,331,843,884,384,350,291,846,388,14,403,284,672,60,240,276,580,528,89,409,707,516,597,915,954,724,213,737,555,360,63,704,331,652,555,776,514,432,400,270,86,474,213,780,800,961,339,180,303,692,855,136,489,160,117,760,447,430,529,101,456,153,820,218,472,256,664,907,785,493,103,54,695,540,588,291,241,252,793,9,775,359,172,668,477,226,229,547,77,992,560,311,471,732,895,226,736,256,255,559,373,569,107,636,32,169,926,208,59,597,859,500,523,696,297,296,335,924,217,148,629,541,641,243,483,723,564,865,337,71,352,467,226,571,62,278,861,217,878,253,383,911,870,851,139,824,252,109,895,812,655,795,215,587,14,995,213,634,831,314,233,338,477,187,641,445,349,863,977,317,61,488,609,511,486,673,39,577,294,513,927,989,554,884,502,611,22,224,66,336,104,2,749,652,587,508,595,472,709,301,452,554,383,67,488,903,353,502,230,621,679,409,612,383,362,340,90,627,911,756,558,565,420,862,96,986,491,407,478,476,272,97,586,147,117,610,644,81,850,45,593,955,845,754,424,587,337,352,13,324,335,938,372,208,389,728,926,884,731,572,30,732,788,956,350,11,46,987,727,668,136,388,647,696,975,953,674,554,723,637,974,142,346,350,256,364,540,252,225,404,347,483,932,470,344,966,312,752,259,140,983,199,954,340,130,540,964,383,228,694,701,751,46,665,39,78,975,921,713,969,791,899,114,831,402,509,187,834,560,250,268,56,911,536,790,745,958,927,129,44,378,778,475,757,629,331,577,165,907,944,282,416,901,567,288,270,895,937,447,295,545,747,501,898,530,482,433,382,30,263,533,230,618,942,661,985,957,879,266,760,266,758,186,209,840,907,491,114,487,146,403,367,687,413,963,181,833,266,788,235,313,926,974,558,422,729,744,567,650,681,336,163,138,502,315,410,107,994,845,569,463,456,473,616,496,810,544,409,141,74,587,79,161,891,134,195,478,118,895,980,517,574,823,871,260,957,772,879,776,934,713,460,619,600,978,551,260,719,433,636,341,261,916,220,904,283,205,91,151,800,870,808,70,480,99,708,196,962,735,875,558,973,140,738,63,663,31,163,780,536,702,122,5,841,940,85,207,531,298,822,897,977,574,180,542,161,35,344,77,453,129,940,419,554,399,967,869,70,413,821,836,9,808,402,224,647,366,192,913,806,216,64,113,312,920,849,4,245,442,300,905,885,702,53,831,823,179,980,514,267,656,550,884,435,74,546,434,159,14,58,347,714,220,229,593,674,289,835,176,355,953,801,489,935,687,981,518,74,818,853,405,893,373,412,241,161,598,466,724,123,817,433,647,160,657,558,622,735,111,744,988,125,358,317,534,962,779,151,231,59,830,650,8,818,31,281,140,91,53,351,778,738,504,504,441,928,895,732,865,981,780,584,250,598,913,228,415,678,519,232,88,785,638,759,825,572,803,91,407,931,826,769,791,155,649,558,784,150,177,325,100,905,869,387,695,670,911,806,817,295,672,638,810,785,791,30,426,905,583,169,903,470,835,446,713,495,374,34,337,977,43,577,78,815,855,473,771,348,55,125,984,468,303,858,611,860,871,253,359,380,245,442,58,193,758,218,663,160,290,409,273,401,408,182,489,316,529,119,309,981,602,838,546,332,512,507,149,427,154,263,828,275,313,973,519,78,248,329,715,175,938,178,923,465,438,228,655,18,455,468,751,145,738,732,116,511,674,822,313,260,40,80,405,959,779,574,254,452,893,34,630,613,172,264,550,716,122,564,380,803,48,245,346,13,620,894,349,746,880,661,559,239,948,999,208,202,269,484,300,104,316,801,934,222,410,688,951,21,394,106,787,955,878,987,176,488,555,3,451,78,138,479,931,977,905,399,646,46,975,148,148,353,235,24,184,161,7,593,433,263,580,756,768,803,684,239,942,980,624,104,89,320,685,518,208,905,973,422,292,916,343,767,73,372,769};
        int[] exp = {};
        TreeQuery test = new TreeQuery();
        
        int[] res = test.tree(a, b, x, y);
    }
    
    public int[] tree(int[] x, int[] y, int[] a, int[] b) {
        // Write your code here
        if (x == null || y == null || a == null || b == null) return new int[0];
        
        HashMap<Integer, HashSet<Integer>> graph = new HashMap<>();
        for (int i = 0; i < x.length; i++) {
            if (!graph.containsKey(x[i]))
                graph.put(x[i], new HashSet<>());
            if (!graph.containsKey(y[i]))
                graph.put(y[i], new HashSet<>());
            
            graph.get(x[i]).add(y[i]);
            graph.get(y[i]).add(x[i]);
        }
        // int[] pnc = bfs(1, x.length + 2, graph);
        int[] fns = new int[x.length + 2];
        dfs(1, 0, graph, fns);
        
        int[] res = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            if (a[i] == b[i]) {
                res[i] = 1;
                continue;
            }
            
            int parentA = fns[a[i]];
            int parentB = fns[b[i]];

            if (parentA == parentB) {
                res[i] = 1;
            } else if (parentA == b[i] || parentB == a[i]) {
                res[i] = 2;
            } else {
                res[i] = 0;
            }
        }
        
        return res;
    }
    
    private int[] bfs(int root, int N, HashMap<Integer, HashSet<Integer>> graph) {
        Queue<Integer> q = new LinkedList<>();
        q.offer(root);
        
        int[] pnc = new int[N];
        pnc[root] = 0;
        
        HashSet<Integer> visited = new HashSet<>();
        visited.add(root);
        
        while(!q.isEmpty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                int p = q.poll();
                for (int c : graph.get(p)) {
                    if (visited.contains(c))
                        continue;
                    pnc[c] = p;
                    q.offer(c);
                    visited.add(c);
                }
            }
        }
        return pnc;
    }
    
    private void dfs(int cur, int father, HashMap<Integer, HashSet<Integer>> graph, int[] fns) {
        fns[cur] = father;
        
        for (int child : graph.get(cur)) {
            if (child != father) {
                dfs(child, cur, graph, fns);
            }
        }
    }
}
